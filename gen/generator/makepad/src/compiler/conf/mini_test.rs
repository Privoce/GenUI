use makepad_widgets :: * ; use gen_components :: * ; live_design ! { use link :: widgets :: * ; use link :: gen_components :: * ; use link :: shaders :: * ; pub Easy = { { Easy } } { flow : Down , spacing : 8.0 , < GTag > { text : "hello" , } < GTag > { color : vec4 (1.0 , 0.0 , 0.0 , 1.0) , text : "hello" , } < GTag > { theme : Info , border_radius : 6.0 , closeable : true , text : "hello" , font_size : 14.0 , } < GToggle > { } < GToggle > { selected : true , theme : Error , } < GLoading > { theme : Error , } dot_load = < GLoading > { loading_type : DotLine , } < GCollapse > { width : 300.0 , position : Right , height : 180.0 , header : < GView > { height : 40.0 , theme : Info , < GLabel > { text : "default collapse" , } } body : < GView > { theme : Error , height : 140.0 , < GButton > { } } } < GDropDown > { trigger = < GButton > { slot : < GLabel > { text : "Open Dialog" , } } popup : < GDialog > { container : < GView > { width : 360.0 , theme : Info , height : 220.0 , flow : Down , < GLabel > { text : "Container" , } } } } } } # [derive (Live , Widget)] pub struct Easy { # [deref] pub deref_widget : GView , } impl Easy { # [allow (unused_variables)] fn open_loading (& self , cx : & mut Cx) { dbg ! ("open loading") ; } } # [allow (unused)] impl EasyRef { } impl Widget for Easy { # [allow (unused_variables)] fn draw_walk (& mut self , cx : & mut Cx2d , scope : & mut Scope , walk : Walk) -> DrawStep { self . deref_widget . draw_walk (cx , scope , walk) } # [allow (unused_variables)] fn handle_event (& mut self , cx : & mut Cx , event : & Event , scope : & mut Scope) { let actions = cx . capture_actions (| cx | self . deref_widget . handle_event (cx , event , scope)) ; let dot_load = self . gloading (id ! (dot_load)) ; if let Some (_) = dot_load . opened (& actions) { self . open_loading (cx) ; } } # [allow (unused_variables)] fn is_visible (& self) -> bool { self . visible } } impl LiveHook for Easy { # [allow (unused_variables)] fn after_apply (& mut self , cx : & mut Cx , apply : & mut Apply , index : usize , nodes : & [LiveNode]) { self . deref_widget . after_apply (cx , apply , index , nodes) ; } } pub struct EasyDeref { }